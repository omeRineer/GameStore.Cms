@inherits BaseDialog

@inject SliderContentService SliderContentService

<AuthorizeArea Policy="@Policies.SliderContent">
    <Loading IsLoading="IsLoading">
        <EditForm Model="UpdateSliderContent" OnValidSubmit="SaveAsync">
            <DataAnnotationsValidator />

            <div class="row">
                <div class="col-md-8">
                    <div class="row mb-2">
                        <div class="col-md-3">
                            <RadzenLabel Text="Slider Türü:" />
                        </div>
                        <div class="col-md-9">
                            <RadzenDropDown Data="sliderTypes"
                                            Placeholder="Seçiniz"
                                            TValue="int"
                                            @bind-Value="UpdateSliderContent.SliderTypeId"
                                            TextProperty="Description"
                                            ValueProperty="Id"
                                            class="w-100" />
                            <ValidationMessage For="() => UpdateSliderContent.SliderTypeId" />
                        </div>
                    </div>

                    <div class="row mb-2">
                        <div class="col-md-3">
                            <RadzenLabel Text="Başlık:" />
                        </div>
                        <div class="col-md-9">
                            <RadzenTextBox class="w-100" @bind-Value="UpdateSliderContent.Header" />
                            <ValidationMessage For="() => UpdateSliderContent.Header" />
                        </div>
                    </div>

                    <div class="row mb-2">
                        <div class="col-md-3">
                            <RadzenLabel Text="Link:" />
                        </div>
                        <div class="col-md-9">
                            <RadzenTextBox class="w-100" @bind-Value="UpdateSliderContent.To" />
                            <ValidationMessage For="() => UpdateSliderContent.To" />
                        </div>
                    </div>

                    <div class="row mb-2">
                        <div class="col-md-3">
                            <RadzenLabel Text="Öncelik Sırası:" />
                        </div>
                        <div class="col-md-9">
                            <RadzenNumeric Min="0" class="w-100" @bind-Value="UpdateSliderContent.Priority" />
                            <ValidationMessage For="() => UpdateSliderContent.Priority" />
                        </div>
                    </div>

                    <div class="row mb-2">
                        <div class="col-md-3">
                            <RadzenLabel Text="Aktif mi ?" />
                        </div>
                        <div class="col-md-9">
                            <RadzenCheckBox @bind-Value="UpdateSliderContent.IsActive" />
                            <ValidationMessage For="() => UpdateSliderContent.IsActive" />
                        </div>
                    </div>

                </div>
                <div class="col-md-4">
                    <RadzenCard Variant="@Variant.Filled" Style="overflow: hidden; position: relative; height: 22rem;">
                        <RadzenButton Text="Resim Seç" Click="@OpenFileDialogAsync" Style="position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%);" />

                        @if (UpdateSliderContent.CoverImage != null)
                        {
                            <div class="rz-mx-auto mb-2" style="height: 17rem; display: flex; align-items: center; justify-content: center;">
                                <img src="@UpdateSliderContent.CoverImage"
                                     alt="community"
                                     style="max-height: 100%; max-width: 100%; object-fit: contain;" />
                            </div>
                        }
                    </RadzenCard>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Kaydet" Style="margin-bottom: 10px; width: 150px" Visible="@(IsLoading == false)" />
                    <RadzenButton Click="@((args) => DialogService.Close(false))" ButtonStyle="ButtonStyle.Secondary" Text="İptal" Style="margin-bottom: 10px; width: 150px" />
                </div>
            </div>

        </EditForm>
    </Loading>
</AuthorizeArea>


@code {
    [Parameter] public Guid SliderContentId { get; set; }
    UpdateSliderContentModel UpdateSliderContent = new UpdateSliderContentModel();
    List<LookupModel>? sliderTypes;


    protected async override Task OnInitializedAsync()
    {
        IsLoading = true;

        var getSliderContentResult = await SliderContentService.GetAsync<SliderContentModel>(SliderContentId);

        if (!getSliderContentResult.Success)
        {
            NotificationService.Error(getSliderContentResult.Message);
            return;
        }

        UpdateSliderContent = Mapper.Map<UpdateSliderContentModel>(getSliderContentResult.Data);

        var getSliderTypesResult = await LookupService.GetSliderTypesAsync();
        if (!getSliderTypesResult.Success)
        {
            NotificationService.Error(getSliderTypesResult.Message);
            return;
        }
        sliderTypes = getSliderTypesResult.Data?.Items;

        IsLoading = false;
    }

    private async Task OpenFileDialogAsync()
    {
        var result = await DialogService.OpenAsync<FileDialog>("Resim Seç",
                new Dictionary<string, object> { { "Tags", "slider-item-image,side-slider-item-image" } },
                new DialogOptions { Width = "1000px" });

        if (result != null)
        {
            var selectedMedia = (FileRoot)result;
            UpdateSliderContent.CoverImage = selectedMedia.Url;
        }
    }

    async Task SaveAsync()
    {
        IsLoading = true;

        var result = await SliderContentService.UpdateAsync(UpdateSliderContent);

        if (!result.Success)
            NotificationService.Error(result.Message);
        else
        {
            NotificationService.Success(result.Message);
            DialogService.Close(DialogResult.Refresh);
        }

        IsLoading = false;
    }
}
