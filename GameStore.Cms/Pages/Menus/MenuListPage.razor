@page "/menumanagement"
@attribute [Authorize(Policies.Menu)]

@inherits BaseDataPage<ODataMenu>
@inject MenuODataService MenuODataService
@inject MenuService MenuService

<div class="row">
    <div class="col-xl-3">
        <RadzenButton Icon="add" Click=@(args => DialogService.Open<MenuAddPage>("Menü Ekle",
                                           null,
                                           new DialogOptions{Width = "600px"} )) />

        <RadzenButton Icon="edit" Click=@(async args => await DialogService.OpenAsync<MenuAddPage>("Menü Düzenle",
                                          new Dictionary<string, object> { { "MenuId", ((ODataMenu)SelectedItem).Id } },
                                          new DialogOptions{Width = "600px"})) />
        <RadzenButton Icon="remove" Click=@Delete />
        <RadzenButton Icon="refresh" Click=@Refresh />
    </div>
</div>



<BaseDataGrid TItem="ODataMenu"
              IsLoading="IsLoading"
              Data="Data"
              @bind-SelectedItem="@SelectedItem"
              LoadData="LoadData"
              Count="Count"
              Columns=@(new Dictionary<string, string>
             {
                 { "Code", "Menü Kodu" },
                 { "Title", "Menü Adı" },
                 { "ParentMenu.Title", "Üst Menü" },
                 { "Path", "Navigasyon" },
                 { "Priority", "Menü Sırası" },
             }) />

@code {

    async Task LoadData(LoadDataArgs args)
    {
        IsLoading = true;
        LastArgs = args;

        var result = await MenuODataService.GetListAsync(new ODataRequestParams
        {
            Count = true,
            Filter = args.Filter,
            OrderBy = args.OrderBy,
            Skip = args.Skip,
            Top = args.Top,
            Expand = "ParentMenu"
        });

        Data = result.Value.AsODataEnumerable();
        Count = result.Count;

        StateHasChanged();
        IsLoading = false;
    }

    private async void Delete()
    {
        var isConfirm = await DialogService.Confirm("Silmek istediğinize emin misiniz?", "Uyarı", new ConfirmOptions { OkButtonText = "Evet", CancelButtonText = "Hayır" });
        if (isConfirm != true)
            return;

        IsLoading = true;

        var result = await MenuService.DeleteAsync(((ODataMenu)SelectedItem).Id);
        if (!result.Success)
        {
            NotificationService.Error(result.Message);
            return;
        }
        else
            NotificationService.Success(result.Message);

        DialogService.Close(true);
        Refresh();
        IsLoading = false;
    }

    protected async override void Close(dynamic result)
    {
        if (result == true)
        {
            await LoadData(LastArgs);
            StateHasChanged();
        }
    }

    protected async override void Refresh()
    {
        base.Refresh();
        await LoadData(LastArgs);
        StateHasChanged();
    }

}