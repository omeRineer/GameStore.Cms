@inherits BaseDialog
@inject MenuService MenuService
@inject PermissionODataService PermissionODataService

<AuthorizeArea Policy="@Policies.Identity">
    <div class="row">
        <div class="col-md-9">
            <RadzenListBox FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                           FilterOperator="StringFilterOperator.Contains"
                           AllowFiltering="true"
                           @bind-Value=@SetMenuPermissionsModel.Permissions
                           TextProperty="Key"
                           ValueProperty="Id"
                           Data="@Permissions"
                           Multiple=true
                           AllowClear=true
                           Placeholder="Arama"
                           Style="width: 100%; height:400px" />

        </div>
        <div class="col-md-3">
            <RadzenButton Text="Kaydet" Click="async args=> await SetMenuPermissionsAsync()" Style="margin-bottom: 10px; width: 100%" Visible="@(IsLoading == false)" />
        </div>
    </div>
</AuthorizeArea>

@code {
    [Parameter] public ODataMenu Menu { get; set; }

    SetMenuPermissionsModel SetMenuPermissionsModel = new SetMenuPermissionsModel();
    IEnumerable<ODataPermission>? Permissions;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        var menuPermissionsResult = await MenuService.GetPermissionsAsync(Menu.Id);
        if (menuPermissionsResult.Data != null)
            SetMenuPermissionsModel.Permissions = menuPermissionsResult.Data.Permissions;

        var permissionsResult = await PermissionODataService.GetListAsync(new ODataRequestParams { });
        if (permissionsResult.Value != null)
            Permissions = permissionsResult.Value.OrderByDescending(o => SetMenuPermissionsModel?.Permissions?.Contains(o.Id));

        SetMenuPermissionsModel.MenuId = Menu.Id;

        IsLoading = false;
    }

    async Task SetMenuPermissionsAsync()
    {
        IsLoading = true;

        var result = await MenuService.SetPermissionsAsync(SetMenuPermissionsModel);

        if (!result.Success)
            NotificationService.Error(result.Message);
        else
        {
            NotificationService.Success(result.Message);
            DialogService.Close(true);
        }

        IsLoading = false;
    }
}
