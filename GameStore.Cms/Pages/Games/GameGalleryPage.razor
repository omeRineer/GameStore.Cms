@*@inherits BaseDialog

@inject MediaODataService MediaODataService
@inject GameService GameService

<div class="row mb-2">
    <div class="col-md-4">
        <RadzenButton Text="Resim Seç" Click=@OpenFileDialogAsync />
    </div>
</div>
<div class="row">
    <div class="col-md-4">
            <RadzenListBox TValue="Media"
                           FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                           FilterOperator="StringFilterOperator.StartsWith"
                           AllowFiltering="true"
                           LoadData="LoadData"
                           Data="GameImageCollection"
                           @bind-Value="SelectedMedia"
                           Style="width: 100%; height:250px;">
                <Template>
                    <div class="d-flex justify-content-between">
                        <span>@((context as Media).Name)</span>
                    </div>
                </Template>
            </RadzenListBox>
    </div>
    <div class="col-md-8">
        @if (SelectedMedia != null)
        {
            <RadzenImage Style="max-width: 100%; max-height:100%" Path="@($"{Configuration.CoreConfiguration.StorageAPIPath}/{SelectedMedia.Node}/{SelectedMedia.Name}")" class="w-100 h-100" />
        }
    </div>
</div>
-
<div class="row mt-3">
    <div class="col-md-12">
        @if (UploadGameImagesModel.Images != null)
        {
            <RadzenButton Click="@SaveAsync" Text="Kaydet" Style="margin-bottom: 10px; width: 150px" Visible="@(IsLoading == false)" />
        }
        <RadzenButton Click="@((args) => DialogService.Close(false))" ButtonStyle="ButtonStyle.Secondary" Text="İptal" Style="margin-bottom: 10px; width: 150px" />
    </div>
</div>

@code {
    [Parameter] public Guid GameId { get; set; }
    Media SelectedMedia;
    public UploadGameImagesModel UploadGameImagesModel = new UploadGameImagesModel();
    IEnumerable<Media> GameImageCollection;

    async Task LoadData(LoadDataArgs args)
    {
        IsLoading = true;

        var result = await MediaODataService.GetListAsync(new ODataRequestParams
        {
            Filter = $"EntityId eq {GameId} and MediaTypeId eq {101}"
        });

        GameImageCollection = result.Value.AsODataEnumerable();

        StateHasChanged();
        IsLoading = false;
    }

    private async Task OpenFileDialogAsync()
    {
        var result = await DialogService.OpenAsync<MediaDialog<List<File>>>("Görsel Seç",
            new Dictionary<string, object> { { "Node", "game-cover-images" } },
            new DialogOptions { Width = "800px" });

        if (result != null)
            UploadGameImagesModel.Images = result as List<File>;
    }

    async Task SaveAsync()
    {
        IsLoading = true;

        UploadGameImagesModel.EntityId = GameId;

        var result = await GameService.UploadGameImagesAsync(UploadGameImagesModel);

        if (!result.IsSuccessful)
            NotificationService.Error(result.ErrorMessage);
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = result.ErrorMessage });
            DialogService.Close(true);
        }

        IsLoading = false;
    }
}*@
