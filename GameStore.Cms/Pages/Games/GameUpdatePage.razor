@inherits BaseDialog

@inject GameService GameService
@inject CategoryODataService CategoryODataService

<AuthorizeArea Policy="@Policies.Game">
    <Loading IsLoading="IsLoading">
        @if (UpdateGameModel != null)
        {
            <EditForm Model="UpdateGameModel" OnValidSubmit="SaveAsync">
                <DataAnnotationsValidator />

                <div class="row">
                    <div class="col-md-8">

                        <div class="row mb-2">
                            <div class="col-md-2">
                                <RadzenLabel Text="Oyun Adı:" />
                            </div>
                            <div class="col-md-10">
                                <RadzenTextBox class="w-100" @bind-Value="UpdateGameModel.Name" />
                                <ValidationMessage For="() => UpdateGameModel.Name" />
                            </div>
                        </div>

                        <div class="row mb-2">
                            <div class="col-md-2">
                                <RadzenLabel Text="Kategori:" />
                            </div>
                            <div class="col-md-10">
                                <RadzenDropDown Data="categories"
                                                TValue="Guid"
                                                @bind-Value="UpdateGameModel.CategoryId"
                                                TextProperty="Value"
                                                ValueProperty="Key"
                                                class="w-100" />
                                <ValidationMessage For="() => UpdateGameModel.CategoryId" />
                            </div>
                        </div>

                        <div class="row mb-2">
                            <div class="col-md-2">
                                <RadzenLabel Text="Fiyat:" />
                            </div>
                            <div class="col-md-10">
                                <RadzenNumeric class="w-100" TValue="decimal" @bind-Value="UpdateGameModel.Price" />
                                <ValidationMessage For="() => UpdateGameModel.Price" />
                            </div>
                        </div>

                        <div class="row mb-2">
                            <div class="col-md-2">
                                <RadzenLabel Text="Açıklama:" />
                            </div>
                            <div class="col-md-10">
                                <RadzenTextArea Rows="5" class="w-100" @bind-Value="UpdateGameModel.Description" />
                                <ValidationMessage For="() => UpdateGameModel.Description" />
                            </div>
                        </div>

                        <div class="row mb-2">
                            <div class="col-md-2 align-items-center d-flex">
                                <RadzenLabel Text="İçerik:" />
                            </div>
                            <div class="col-md-10">
                                <RadzenHtmlEditor @bind-Value="UpdateGameModel.Content" style="height: 300px;" />
                                <ValidationMessage For="() => UpdateGameModel.Content" />
                            </div>
                        </div>

                        <div class="row mb-2">
                            <div class="col-md-2">
                                <RadzenLabel Text="Yayın Tarihi:" />
                            </div>
                            <div class="col-md-10">
                                <RadzenDatePicker class="w-100" TValue="DateTime" @bind-Value="UpdateGameModel.ReleaseDate" DateFormat="dd.MM.yyyy HH:mm" />
                                <ValidationMessage For="() => UpdateGameModel.ReleaseDate" />
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <RadzenCard Variant="@Variant.Filled" Style="overflow: hidden; position: relative; height:22rem;">
                            <RadzenButton Text="Resim Seç" Click="@OpenFileDialogAsync" Style="position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%);" />

                            @if (UpdateGameModel.CoverImage != null)
                            {
                                <div class="rz-mx-auto mb-2" style="height: 17rem; display: flex; align-items: center; justify-content: center;">
                                    <img src="@UpdateGameModel.CoverImage"
                                         alt="community"
                                         style="max-height: 100%; max-width: 100%; object-fit: contain;" />
                                </div>
                            }
                        </RadzenCard>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-12">
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Kaydet" Style="margin-bottom: 10px; width: 150px" Visible="@(IsLoading == false)" />
                        <RadzenButton Click="@((args) => DialogService.Close(false))" ButtonStyle="ButtonStyle.Secondary" Text="İptal" Style="margin-bottom: 10px; width: 150px" />
                    </div>
                </div>
            </EditForm>
        }
    </Loading>
</AuthorizeArea>

@code {
    [Parameter] public Guid GameId { get; set; }
    Dictionary<Guid, string> categories;
    UpdateGameModel UpdateGameModel;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        categories = (await CategoryODataService.GetListAsync(new ODataRequestParams
        {
            Select = "Id,Name"
        })).Value.ToDictionary(k => k.Id, v => v.Name);

        var result = await GameService.GetAsync<GameModel>(GameId);

        if (result.Data == null)
        {
            NotificationService.Error(result.Message);
            return;
        }

        UpdateGameModel = Mapper.Map<UpdateGameModel>(result.Data);

        IsLoading = false;

    }

    private async Task OpenFileDialogAsync()
    {
        var result = await DialogService.OpenAsync<FileDialog>("Resim Seç",
                        new Dictionary<string, object> { { "Tags", "game-cover-image" } },
                        new DialogOptions { Width = "1000px" });

        if (result != null)
        {
            var selectedMedia = (FileRoot)result;
            UpdateGameModel.CoverImage = selectedMedia.Url;
        }
    }


    private async Task SaveAsync()
    {
        IsLoading = true;

        var result = await GameService.UpdateAsync(UpdateGameModel);

        if (!result.Success)
            NotificationService.Error(result.Message);
        else
        {
            NotificationService.Success(result.Message);
            DialogService.Close(DialogResult.Refresh);
        }

        IsLoading = false;
    }
}
