@inherits BaseDialog

@inject RoleService RoleService

<AuthorizeArea Policy="@Policies.Identity">
    @if (UpdateRoleModel != null)
    {
        <EditForm Model="UpdateRoleModel" OnValidSubmit="SaveAsync">
            <DataAnnotationsValidator />

            <div class="row mb-2">
                <div class="col-md-2 align-items-center d-flex">
                    <RadzenLabel Text="Key:" />
                </div>
                <div class="col-md-10">
                    <RadzenTextBox class="w-100" @bind-Value="UpdateRoleModel.Key" />
                    <ValidationMessage For="() => UpdateRoleModel.Key" />
                </div>
            </div>

            <div class="row mb-2">
                <div class="col-md-2 align-items-center d-flex">
                    <RadzenLabel Text="Title:" />
                </div>
                <div class="col-md-10">
                    <RadzenTextBox class="w-100" @bind-Value="UpdateRoleModel.Name" />
                    <ValidationMessage For="() => UpdateRoleModel.Name" />
                </div>
            </div>

            <div class="row mb-2">
                <div class="col-md-2 align-items-center d-flex">
                    <RadzenLabel Text="Açıklama:" />
                </div>
                <div class="col-md-10">
                    <RadzenTextArea Rows="7" class="w-100" @bind-Value="UpdateRoleModel.Description" />
                    <ValidationMessage For="() => UpdateRoleModel.Description" />
                </div>
            </div>

            <div class="row mt-3">
                <div class="col-md-12">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Kaydet" Style="margin-bottom: 10px; width: 150px" Visible="@(IsLoading == false)" />
                    <RadzenButton Click="@((args) => DialogService.Close(false))" ButtonStyle="ButtonStyle.Secondary" Text="İptal" Style="margin-bottom: 10px; width: 150px" />
                </div>
            </div>

        </EditForm>
    }
</AuthorizeArea>


@code {
    [Parameter] public object RoleId { get; set; }
    UpdateRoleModel UpdateRoleModel;

    protected override async Task OnInitializedAsync()
    {
        var result = await RoleService.GetAsync<RoleModel>((Guid)RoleId);

        if (result.Data == null)
        {
            NotificationService.Error(result.Message);
            return;
        }

        UpdateRoleModel = Mapper.Map<UpdateRoleModel>(result.Data);

    }


    private async Task SaveAsync()
    {
        IsLoading = true;

        var result = await RoleService.UpdateAsync(UpdateRoleModel);

        if (!result.Success)
            NotificationService.Error(result.Message);
        else
        {
            NotificationService.Success(result.Message);
            DialogService.Close(true);
        }

        IsLoading = false;
    }
}
