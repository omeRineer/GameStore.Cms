@inherits BaseDialog

@inject UserService UserService

<AuthorizeArea Policy="@Policies.Identity">
    <Loading IsLoading="IsLoading">
        @if (UpdateUserModel != null)
        {
            <EditForm Model="UpdateUserModel" OnValidSubmit="SaveAsync">
                <DataAnnotationsValidator />

                <div class="row mb-2">
                    <div class="col-md-2 align-items-center d-flex">
                        <RadzenLabel Text="İsim:" />
                    </div>
                    <div class="col-md-10">
                        <RadzenTextBox class="w-100" @bind-Value="UpdateUserModel.FirstName" />
                        <ValidationMessage For="() => UpdateUserModel.FirstName" />
                    </div>
                </div>

                <div class="row mb-2">
                    <div class="col-md-2 align-items-center d-flex">
                        <RadzenLabel Text="Soy İsim:" />
                    </div>
                    <div class="col-md-10">
                        <RadzenTextBox class="w-100" @bind-Value="UpdateUserModel.LastName" />
                        <ValidationMessage For="() => UpdateUserModel.LastName" />
                    </div>
                </div>

                <div class="row mb-2">
                    <div class="col-md-2 align-items-center d-flex">
                        <RadzenLabel Text="Telefon:" />
                    </div>
                    <div class="col-md-10">
                        <RadzenTextBox MaxLength="11" class="w-100" @bind-Value="UpdateUserModel.Phone" />
                        <ValidationMessage For="() => UpdateUserModel.Phone" />
                    </div>
                </div>

                <div class="row mb-2">
                    <div class="col-md-2 align-items-center d-flex">
                        <RadzenLabel Text="Email:" />
                    </div>
                    <div class="col-md-10">
                        <RadzenTextBox class="w-100" @bind-Value="UpdateUserModel.Email" />
                        <ValidationMessage For="() => UpdateUserModel.Email" />
                    </div>
                </div>

                <div class="row mb-2">
                    <div class="col-md-2 align-items-center d-flex">
                        <RadzenLabel Text="Kullanıcı Adı:" />
                    </div>
                    <div class="col-md-10">
                        <RadzenTextBox class="w-100" @bind-Value="UpdateUserModel.UserName" />
                        <ValidationMessage For="() => UpdateUserModel.UserName" />
                    </div>
                </div>

                <div class="row mb-2">
                    <div class="col-md-2 align-items-center d-flex">
                        <RadzenLabel Text="Parola:" />
                    </div>
                    <div class="col-md-10">
                        <RadzenTextBox class="w-100" @bind-Value="UpdateUserModel.Password" />
                        <ValidationMessage For="() => UpdateUserModel.Password" />
                    </div>
                </div>

                <div class="row mb-2">
                    <div class="col-md-2 align-items-center d-flex">
                        <RadzenLabel Text="Doğum Tarihi:" />
                    </div>
                    <div class="col-md-10">
                        <RadzenDatePicker class="w-100" @bind-Value="UpdateUserModel.BirthdayDate" />
                        <ValidationMessage For="() => UpdateUserModel.BirthdayDate" />
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-md-12">
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Kaydet" Style="margin-bottom: 10px; width: 150px" Visible="@(IsLoading == false)" />
                        <RadzenButton Click="@((args) => DialogService.Close(false))" ButtonStyle="ButtonStyle.Secondary" Text="İptal" Style="margin-bottom: 10px; width: 150px" />
                    </div>
                </div>

            </EditForm>
        }
    </Loading>
</AuthorizeArea>


@code {
    [Parameter] public object UserId { get; set; }
    UpdateUserModel UpdateUserModel;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        var result = await UserService.GetAsync<UserModel>((Guid)UserId);

        if (result.Data == null)
        {
            NotificationService.Error(result.Message);
            return;
        }

        UpdateUserModel = Mapper.Map<UpdateUserModel>(result.Data);

        IsLoading = false;
    }


    private async Task SaveAsync()
    {
        IsLoading = true;

        var result = await UserService.UpdateAsync(UpdateUserModel);

        if (!result.Success)
            NotificationService.Error(result.Message);
        else
        {
            NotificationService.Success(result.Message);
            DialogService.Close(DialogResult.Refresh);
        }

        IsLoading = false;
    }
}
