@inherits BaseDialog

@inject BlogService BlogService

<AuthorizeArea Policy="@Policies.Blog">
    <Loading IsLoading="IsLoading">
        @if (UpdateBlogModel != null)
        {
            <EditForm Model="UpdateBlogModel" OnValidSubmit="SaveAsync">
                <DataAnnotationsValidator />

                <div class="row">
                    <div class="col-md-8">
                        <div class="row mb-2">
                            <div class="col-md-2 align-items-center d-flex">
                                <RadzenLabel Text="Başlık:" />
                            </div>
                            <div class="col-md-10">
                                <RadzenTextBox class="w-100" @bind-Value="UpdateBlogModel.Header" />
                                <ValidationMessage class="fs-small" For="() => UpdateBlogModel.Header" />
                            </div>
                        </div>

                        <div class="row mb-2">
                            <div class="col-md-2 align-items-center d-flex">
                                <RadzenLabel Text="Yayın Durumu:" />
                            </div>
                            <div class="col-md-10">
                                <RadzenCheckBox @bind-Value="UpdateBlogModel.Status" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-2 align-items-center d-flex">
                                <RadzenLabel Text="İçerik:" />
                            </div>
                            <div class="col-md-10">
                                <RadzenHtmlEditor @bind-Value="UpdateBlogModel.Content" style="height: 300px;" />
                                <ValidationMessage For="() => UpdateBlogModel.Content" />
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <RadzenCard Variant="@Variant.Filled" Style="overflow: hidden; position: relative; height: 22rem;">
                            <RadzenButton Text="Resim Seç" Click="@OpenFileDialogAsync" Style="position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%);" />

                            @if (UpdateBlogModel.CoverImage != null)
                            {
                                <div class="rz-mx-auto mb-2" style="height: 17rem; display: flex; align-items: center; justify-content: center;">
                                    <img src="@UpdateBlogModel.CoverImage.Url"
                                         alt="community"
                                         style="max-height: 100%; max-width: 100%; object-fit: cover;" />
                                </div>
                            }
                        </RadzenCard>
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-md-12">
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Kaydet" Style="margin-bottom: 10px; width: 150px" Visible="@(IsLoading == false)" />
                        <RadzenButton Click="@((args) => DialogService.Close(false))" ButtonStyle="ButtonStyle.Secondary" Text="İptal" Style="margin-bottom: 10px; width: 150px" />
                    </div>
                </div>

            </EditForm>
        }
    </Loading>
</AuthorizeArea>

@code {
    [Parameter] public object BlogId { get; set; }
    UpdateBlogModel UpdateBlogModel;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        var result = await BlogService.GetAsync<BlogModel>((Guid)BlogId);

        if (result.Data == null)
        {
            NotificationService.Error(result.Message);
            return;
        }

        UpdateBlogModel = Mapper.Map<UpdateBlogModel>(result.Data);

        IsLoading = false;
    }

    private async Task OpenFileDialogAsync()
    {
        var result = await DialogService.OpenAsync<FileDialog>("Resim Seç",
                    new Dictionary<string, object>(),
                    new DialogOptions { Width = "1000px" });

        if (result != null)
            UpdateBlogModel.CoverImage = Mapper.Map<PostMediaModel>(result);
    }


    private async Task SaveAsync()
    {
        IsLoading = true;

        var result = await BlogService.UpdateAsync(UpdateBlogModel);

        if (!result.Success)
            NotificationService.Error(result.Message);
        else
        {
            NotificationService.Success(result.Message);
            DialogService.Close(DialogResult.Refresh);
        }

        IsLoading = false;
    }
}
