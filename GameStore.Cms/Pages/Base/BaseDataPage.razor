@implements IDisposable
@typeparam TData

@code {

    public TData SelectedItem;
    protected IEnumerable<TData> Data;
    protected LoadDataArgs LastArgs;
    protected int Count;
    protected bool IsLoading = false;

    protected override void OnInitialized()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
    }

    void IDisposable.Dispose()
    {
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;
    }

    protected async virtual Task LoadData(LoadDataArgs args)
    {

    }

    protected virtual async void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {

    }

    protected virtual async void Close(dynamic result)
    {
        switch (result)
        {
            case DialogResult.Refresh:
                Refresh();
                break;
        }
    }

    protected virtual async void Refresh()
    {
        SelectedItem = default(TData);
        StateHasChanged();
        await LoadData(LastArgs);
    }
}
