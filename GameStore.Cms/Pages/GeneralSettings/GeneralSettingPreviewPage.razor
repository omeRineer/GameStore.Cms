@*<div class="row mb-2">
    <div class="col-md-2">
        <RadzenLabel Text="Anahtar Değeri (Key) :" />
    </div>
    <div class="col-md-4">
        <RadzenTextBox class="w-100" @bind-Value="newSetting.Key" />
    </div>

    <div class="col-md-2">
        <RadzenLabel Text="Ayar Tipi :" />
    </div>
    <div class="col-md-4">
        <RadzenDropDown TValue="int" class="w-100" @bind-Value="newSetting.SettingTypeId" Data="settingTypes" ValueProperty="Key" TextProperty="Value" />
    </div>
</div>

<div class="row mb-2">
    <div class="col-md-2">
        <RadzenLabel Text="Önbellek Durumu :" />
    </div>
    <div class="col-md-4">
        <RadzenCheckBox @bind-Value="newSetting.IsCached" />
    </div>

    <div class="col-md-2">
        <RadzenLabel Text="Önbellek Süresi :" />
    </div>
    <div class="col-md-4">
        <RadzenNumeric TValue="int?" Disabled="!newSetting.IsCached" @bind-Value="newSetting.CacheDuration" Placeholder="Dakika" />
    </div>
</div>

<hr />

<div class="row mb-2">
    <div class="col-md-3">
        <RadzenButton Icon="add" Click="AddProperty" />
    </div>
</div>

@foreach (var inputArea in InputAreas)
{
    <div class="row mb-2">
        <div class="col-md-3">
            <RadzenTextBox class="w-100" Disabled="inputArea.Key.ReadOnly" Placeholder="Property" Change="(args => inputArea.Key.Value = args)" />
        </div>
        <div class="col-md-2">
            <RadzenDropDown Disabled="inputArea.Key.ReadOnly" TValue="InputType" Data="Enum.GetValues(typeof(InputType)).Cast<InputType>().Select(s=> new { Value = s, Text = s.ToString()})" ValueProperty="Value" TextProperty="Text" @bind-Value="@inputArea.Value.Type" />
        </div>
        <div class="col-md-5">
            <DynamicInput Disabled="inputArea.Key.ReadOnly" ValueType="@inputArea.Value.Type" @bind-Value="inputArea.Value.Input.Value" />
        </div>
        <div class="col-md-2">

            @if (!SettingValues.Any(x => x.Key == inputArea.Key.Value))
            {
                <RadzenButton Icon="save" Click="(args=>
                                             {
                                                 SettingValues.Add(inputArea.Key.Value.ToString(), inputArea.Value.Input.Value);
                                                 inputArea.Key.ReadOnly = true;
                                                 inputArea.Value.Input.ReadOnly = true;
                                             })" />
            }

            @if (SettingValues.Any(x => x.Key == inputArea.Key.Value))
            {
                <RadzenButton Icon="edit" Click="(args=>
                                             {
                                                 SettingValues.Remove(inputArea.Key.Value.ToString());
                                                 inputArea.Key.ReadOnly = false;
                                                 inputArea.Value.Input.ReadOnly = false;
                                             })" />
            }

            <RadzenButton Icon="remove" Click="(args=>
                                             {
                                                 if (SettingValues.Any(x=> x.Key == inputArea.Key.Value))
                                                 {
                                                     SettingValues.Remove(inputArea.Key.Value);
                                                 }
                                                 InputAreas.Remove(inputArea.Key);
                                             })" />

        </div>
    </div>
}

<div class="row mt-3">
    <div class="col-md-12">
        <RadzenButton Click="@Save" Text="Kaydet" Style="margin-bottom: 10px; width: 150px" />
    </div>
</div>
@code {
    [Parameter] public string Model { get; set; }
    private dynamic Value { get; set; }

    private IEnumerable<KeyValuePair<string, object>> GetProperties()
    {
        Value = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Dynamic.ExpandoObject>(Model);
        IDictionary<string, object> deneme = (IDictionary<string, object>)Value;
        return deneme;
    }
}*@
