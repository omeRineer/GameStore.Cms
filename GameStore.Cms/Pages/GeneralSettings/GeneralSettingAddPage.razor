
@*@inject TypeLookupODataService TypeLookupODataService

<div class="row mb-2">
    <div class="col-md-2">
        <RadzenLabel Text="Anahtar Değeri (Key) :" />
    </div>
    <div class="col-md-4">
        <RadzenTextBox class="w-100" 
                       @bind-Value="newSetting.Key" />
    </div>

    <div class="col-md-2">
        <RadzenLabel Text="Ayar Tipi :" />
    </div>
    <div class="col-md-4">
        <RadzenDropDown TValue="int" class="w-100" 
                        @bind-Value="newSetting.SettingTypeId" 
                        Data="settingTypes" 
                        ValueProperty="Key" 
                        TextProperty="Value" />
    </div>
</div>

<div class="row mb-2">
    <div class="col-md-2">
        <RadzenLabel Text="Önbellek Durumu :" />
    </div>
    <div class="col-md-4">
        <RadzenCheckBox @bind-Value="newSetting.IsCached" />
    </div>

    <div class="col-md-2">
        <RadzenLabel Text="Önbellek Süresi :" />
    </div>
    <div class="col-md-4">
        <RadzenNumeric TValue="int?" 
                       Disabled="!newSetting.IsCached" 
                       @bind-Value="newSetting.CacheDuration" 
                       Placeholder="Dakika" />
    </div>
</div>

<hr />

<div class="row mb-2">
    <div class="col-md-3">
        <RadzenButton Icon="add" Click="AddProperty" />
        <RadzenButton Icon="delete" Click="(args =>
                                           {
                                               SettingValues.ToList().Clear();
                                               SettingProperties.Clear();
                                           })" />
    </div>
</div>

@foreach (var property in SettingProperties)
{
    <div class="row mb-2">
        <div class="col-md-3">
            <RadzenTextBox class="w-100" 
                           Disabled="property.ReadOnly" 
                           Placeholder="Property" 
                           @bind-Value="property.Key" />
        </div>
        <div class="col-md-2">
            <RadzenDropDown Disabled="property.ReadOnly" 
                            TValue="InputType" 
                            Data="Enum.GetValues(typeof(InputType)).Cast<InputType>().Select(s=> new { Value = s, Text = s.ToString()})" 
                            ValueProperty="Value" 
                            TextProperty="Text" 
                            @bind-Value="@property.Type" />
        </div>
        <div class="col-md-5">
            <DynamicInput Disabled="property.ReadOnly" 
                          ValueType="@property.Type" 
                          @bind-Value="property.Value" />
        </div>
        <div class="col-md-2">

            @if (!SettingValues.Any(x => x.Key == property.Key))
            {
                <RadzenButton Icon="save" Click=@(args=>
                                                 {
                                                     if (string.IsNullOrEmpty(property.Key) || property.Value == null)
                                                     {
                                                         NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Key - Value Değerleri Boş Olamaz!" });
                                                         return;
                                                     }

                                                     SettingValues.Add(property.Key, property.Value);
                                                     property.ReadOnly = true;
                                                 }) />
            }

            @if (SettingValues.Any(x => x.Key == property.Key))
            {
                <RadzenButton Icon="edit" Click="(args=>
                                             {
                                                 SettingValues.Remove(property.Key);
                                                 property.ReadOnly = false;
                                             })" />
            }

            <RadzenButton Icon="remove" Click="(args=>
                                             {
                                                 if (SettingValues.Any(x=> x.Key == property.Key))
                                                 {
                                                     SettingValues.Remove(property.Key);
                                                 }

                                                 SettingProperties.Remove(property);
                                             })" />

        </div>
    </div>
}

<div class="row mt-3">
    <div class="col-md-12">
        <RadzenButton Click="@Save" 
                      Text="Kaydet" 
                      Style="margin-bottom: 10px; width: 150px" />
    </div>
</div>


@code {
    CreateSettingModel newSetting = new CreateSettingModel();
    List<SettingProperty> SettingProperties = new List<SettingProperty>();
    Dictionary<string, object> SettingValues = new Dictionary<string, object>();
    Dictionary<int, string> settingTypes;

    protected override async void OnInitialized()
    {
        var result = (await TypeLookupODataService.GetListAsync(new ODataRequestParams
        {
            Filter = $"ProcessGroupId eq {(int)ProcessGroupEnum.SettingType}"
        })).Value.AsODataEnumerable();

        settingTypes = result.ToDictionary(k => k.Id, v => v.Description);
    }

    void Save()
    {
        newSetting.Value = Newtonsoft.Json.JsonConvert.SerializeObject(SettingValues, Newtonsoft.Json.Formatting.Indented);

    }

    void AddProperty(MouseEventArgs args)
    {
        SettingProperties.Add(new SettingProperty());
    }
}*@
