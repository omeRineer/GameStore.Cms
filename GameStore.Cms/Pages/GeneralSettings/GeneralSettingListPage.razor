@*@page "/generalsettings"

@inherits BaseDataPage<GeneralSetting>
@inject GeneralSettingODataService GeneralSettingODataService

<div class="row">
    <div class="col-xl-3">
        <RadzenButton Icon="add" Click=@(args => DialogService.Open<GeneralSettingAddPage>("Ayar Ekle",
                                           null,
                                           new DialogOptions{Width = "1200px"} )) />

        <RadzenButton Icon="edit" Click=@(args => DialogService.Open<GeneralSettingPreviewPage>("Ayar Düzenle",
                                                  new Dictionary<string, object> { { "Model", ((GeneralSetting)SelectedItem).Value } })) />
        <RadzenButton Icon="remove" Click=@Delete />
        <RadzenButton Icon="refresh" Click=@Refresh />
    </div>
</div>



<BaseDataGrid TItem="GeneralSetting"
              IsLoading="IsLoading"
              Data="Data"
              @bind-SelectedItem="@SelectedItem"
              LoadData="LoadData"
              Count="Count"
              Columns=@(new Dictionary<string, string>
             {
                 { "Key", "Ayar Adı" },
                 { "Description", "Açıklama" },
                 { "CreateDate", "Oluşturulma Tarihi" },
                 { "EditDate", "Son Güncellenme Tarihi" }
             }) />

@code {
    async Task LoadData(LoadDataArgs args)
    {
        IsLoading = true;
        LastArgs = args;

        var result = await GeneralSettingODataService.GetListAsync(new ODataRequestParams
        {
            Count = true,
            Filter = args.Filter,
            OrderBy = args.OrderBy,
            Skip = args.Skip,
            Top = args.Top
        });

        Data = result.Value.AsODataEnumerable();
        Count = result.Count;

        StateHasChanged();
        IsLoading = false;
    }

    private async void Delete()
    {
        //if (SelectedItem == null)
        //{
        //    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Lütfen bir oyun seçin!" });
        //    return;

        //}

        //var isConfirm = await DialogService.Confirm("Silmek istediğinize emin misiniz?", "Uyarı", new ConfirmOptions { OkButtonText = "Evet", CancelButtonText = "Hayır" });
        //if (isConfirm != true)
        //    return;

        //IsLoading = true;

        //var result = await GameService.DeleteAsync(((GeneralSetting)SelectedItem).Id);
        //if (!result.IsSuccessful)
        //{
        //    NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = result.ErrorMessage });
        //    return;
        //}

        //NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = result.StatusCode.ToString() });

        //DialogService.Close(true);
        //Refresh();
        //IsLoading = false;
    }

    protected async override void Close(dynamic result)
    {
        if (result == true)
        {
            await LoadData(LastArgs);
            StateHasChanged();
        }
    }

    protected async override void Refresh()
    {
        base.Refresh();
        await LoadData(LastArgs);
        StateHasChanged();
    }
}*@
