@inherits BaseDialog

@inject CategoryService CategoryService

<AuthorizeArea Policy="@Policies.Blog">
    @if (UpdateModel != null)
    {
        <EditForm Model="UpdateModel" OnValidSubmit="SaveAsync">
            <DataAnnotationsValidator />

            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Kategori Adı:" />
                </div>
                <div class="col-md-8">
                    <RadzenTextBox class="w-100" @bind-Value="UpdateModel.Name" />
                    <ValidationMessage For="() => UpdateModel.Name" />
                </div>
            </div>

            <div class="row mt-3">
                <div class="col-md-12">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Kaydet" Style="margin-bottom: 10px; width: 150px" Visible="@(IsLoading == false)" />
                    <RadzenButton Click="@((args) => DialogService.Close(false))" ButtonStyle="ButtonStyle.Secondary" Text="İptal" Style="margin-bottom: 10px; width: 150px" />
                </div>
            </div>
        </EditForm>
    }
</AuthorizeArea>

@code {
    [Parameter] public object CategoryId { get; set; }
    UpdateCategoryModel UpdateModel;

    protected override async Task OnInitializedAsync()
    {
        var result = await CategoryService.GetAsync<CategoryModel>((Guid)CategoryId);

        if (result.Data == null)
        {
            NotificationService.Error(result.Message);
            return;
        }

        UpdateModel = Mapper.Map<UpdateCategoryModel>(result.Data);

    }


    private async Task SaveAsync()
    {
        IsLoading = true;

        var result = await CategoryService.UpdateAsync(UpdateModel);

        if (!result.Success)
            NotificationService.Error(result.Message);
        else
        {
            NotificationService.Success(result.Message);
            DialogService.Close(DialogResult.Refresh);
        }

        IsLoading = false;
    }
}
