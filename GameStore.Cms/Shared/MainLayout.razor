@inherits LayoutComponentBase
@implements IDisposable

<RadzenComponents />
<RadzenLayout>

    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Style="width: 100%; padding: 0 1rem;">

            <RadzenSidebarToggle />
            <RadzenLabel Text="Game Store Content Management System" Style="font-weight: bold;" />
            @if (User != null && User.IsAuthenticated)
            {
                <RadzenButton Icon="logout" Text="Logout" ButtonStyle="ButtonStyle.Light" Click="@(async c=> await LogoutAsync())" />
            }

        </RadzenStack>
    </RadzenHeader>

    <GameStore.Cms.Shared.Components.MenuList />

    <RadzenBody>
        <div class="rz-p-4">
            @Body
        </div>
    </RadzenBody>
</RadzenLayout>

@code
{
    CurrentUser? User;

    protected override async Task OnInitializedAsync()
    {
        User = await CurrentUserService.GetCurrentUserAsync();

        var notificationApiKey = ClaimTypes.NotificationApiKey;
        if (User.IsAuthenticated && (User.Claims != null && User.Claims.ContainsKey(notificationApiKey)))
        {
            NotificationStorage.OnChanged += OnNotificationChanged;
            await NotificationStorage.LoadAsync();

            var notificationHub = HubConnectionProvider.CreateConnection<ReceiveNotificationModel>("/hubs/notifications",
                                                                                 new Dictionary<string, Action<ReceiveNotificationModel>>
                                                                                 {
                                                                             {
                                                                                 "ReceiveNotification",
                                                                                 (message)=>
                                                                                 {
                                                                                     NotificationStorage.Add(new NotificationModel
                                                                                                         {
                                                                                                            Id = message.Id,
                                                                                                            Type = message.Type,
                                                                                                            Content=message.Content,
                                                                                                            ContentType = message.ContentType,
                                                                                                            Level = message.Level,
                                                                                                            Sender = message.Sender,
                                                                                                            Title = message.Title,
                                                                                                            IsRead = message.IsRead,
                                                                                                            CreateDate = message.CreateDate,
                                                                                                            Custom = message.Custom
                                                                                                         });
                                                                                 }
                                                                             }
                                                                                     }, new() { { notificationApiKey, User.Claims[notificationApiKey] } });
            await notificationHub.StartAsync();
        }

    }

    async Task LogoutAsync()
    {
        await CurrentUserService.LogoutAsync();

        NavigationManager.NavigateTo("/login", true);
    }

    private async void OnNotificationChanged()
    {
        await InvokeAsync(StateHasChanged);

    }

    public void Dispose()
    {
        NotificationStorage.OnChanged -= OnNotificationChanged;
    }
}
