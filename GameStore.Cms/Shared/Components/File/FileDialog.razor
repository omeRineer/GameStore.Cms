@inherits BaseDialog

@inject StorageService StorageService

<Loading IsLoading="IsLoading">
    <div class="row">
        <div class="col-auto">
            <RadzenButton Click="@((args) => DialogService.Close(IsMultiple ? SelectedFiles : SelectedFiles.First()))"
                          Style="margin-bottom: 10px;"
                          Visible="@(IsLoading == false)"
                          Icon="save" />
        </div>

        <div class="row">
            <div class="col-8">
                <RadzenDataGrid RowSelect="args=> OnSelected(args)" RowDeselect="args=> OnDeselected(args)" Data="@GetFilesModel?.FileList" SelectionMode="IsMultiple ? DataGridSelectionMode.Multiple : DataGridSelectionMode.Single" TItem="FileRoot" AllowPaging="true" PageSize="10">
                    <Columns>
                        <RadzenDataGridColumn TItem="FileRoot" Property="Name" Title="Dosya Adı">
                            <Template Context="file">
                                <div class="d-flex justify-content-between">
                                    <RadzenLabel Text="@file.Name" />
                                </div>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </div>

            <div class="col-md-4">
                <RadzenCard Variant="@Variant.Filled" class="h-100" Style="overflow: hidden; position: relative;">
                    @if (SelectedFile != null)
                    {
                        <div class="rz-mx-auto mb-2" style="height: 17rem; display: flex; align-items: center; justify-content: center;">
                            <img src="@SelectedFile.Url"
                                 alt="community"
                                 style="max-height: 100%; max-width: 100%; object-fit: cover;" />
                        </div>
                    }
                </RadzenCard>
            </div>
        </div>
    </div>
</Loading>

@code {
    [Parameter] public bool IsMultiple { get; set; } = false;
    [Parameter] public string? Tags { get; set; }


    GetFilesModel? GetFilesModel;
    FileRoot? SelectedFile;


    List<FileRoot> SelectedFiles = new();
    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        var getFilesResult = await StorageService.GetFilesAsync(Tags);
        if (!getFilesResult.Success)
        {
            NotificationService.Error(getFilesResult.Message);
            return;
        }

        GetFilesModel = getFilesResult.Data;

        IsLoading = false;
    }

    void OnSelected(FileRoot file)
    {
        SelectedFiles.Add(file);
        SelectedFile = file;
    }

    void OnDeselected(FileRoot file)
        => SelectedFiles.Remove(file);


}


